import numpy as np
import pandas as pd
import statsmodels.api as sm
from scipy.stats import ttest_ind

np.random.seed(1234)

# Parameters
n = 20  # Set to 1000 to compare large sample effects

# Treatment effect: constant or heterogeneous
#tau = -10  # constant treatment effect

# Heterogeneous treatment effect example: older people benefit more from the drug
tau = -5 - 0.1 * age  # heterogeneous: more negative for older individuals

# Covariates
age = np.random.normal(50, 10, n)
income = np.random.normal(50000, 10000, n)
mom_chol = np.random.normal(220, 20, n)

# Treatment assignment (RCT = random)
D = np.random.binomial(1, 0.5, n)

# Outcome: y = baseline + treatment effect + covariates + noise
# Note: if tau is array (heterogeneous), use element-wise multiplication with D
y = 200 + D * tau + 0.2 * age - 0.0001 * income + 0.3 * mom_chol + np.random.normal(0, 10, n)

# Build DataFrame
df = pd.DataFrame({
    'y': y,
    'D': D,
    'age': age,
    'income': income,
    'mom_chol': mom_chol
})





# Analysis




# T-test
treated = df[df['D'] == 1]['y']
control = df[df['D'] == 0]['y']
t_stat, p_val = ttest_ind(treated, control)
print(f"T-test statistic: {t_stat:.3f}, p-value: {p_val:.3f}")

# Regression 1: y ~ D
reg1 = sm.OLS(df['y'], sm.add_constant(df['D'])).fit()
print("\nRegression 1 (y ~ D):")
print(reg1.summary())

# Regression 2: y ~ D + covariates
X = df[['D', 'age', 'income', 'mom_chol']]
reg2 = sm.OLS(df['y'], sm.add_constant(X)).fit()
print("\nRegression 2 (y ~ D + covariates):")
print(reg2.summary())
