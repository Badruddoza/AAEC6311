import numpy as np
import pandas as pd
import statsmodels.api as sm
from scipy.optimize import minimize

# Load the CigarettesSW dataset
data = sm.datasets.get_rdataset("CigarettesSW", "AER").data

# Create variables
data['log_packs'] = np.log(data['packs'])
data['log_rprice'] = np.log(data['price'] / data['cpi'])
data['log_rincome'] = np.log(data['income'] / data['population'] / data['cpi'])
data['salestax'] = data['tax'] / data['cpi']

# Define variables
y = data['log_packs'].values.reshape(-1, 1)
X = sm.add_constant(data[['log_rprice', 'log_rincome']]).values
Z = sm.add_constant(data[['salestax', 'log_rincome']]).values

n = y.shape[0]

# Step 1: Identity weighting matrix
def gmm_objective(beta, X, Z, y, W):
    residuals = y - X @ beta.reshape(-1, 1)
    g = Z.T @ residuals / n
    return float(g.T @ W @ g)

beta_init = np.zeros((X.shape[1],))
W_identity = np.eye(Z.shape[1])

res1 = minimize(gmm_objective, beta_init, args=(X, Z, y, W_identity), method='BFGS')
beta_1step = res1.x.reshape(-1, 1)

# Step 2: Compute optimal weighting matrix W = S^{-1}
residuals_1step = y - X @ beta_1step
g_i = Z * residuals_1step  # element-wise multiplication
S = g_i.T @ g_i / n
W_opt = np.linalg.inv(S)

# Re-estimate using optimal weighting matrix
res2 = minimize(gmm_objective, beta_1step.flatten(), args=(X, Z, y, W_opt), method='BFGS')
beta_2step = res2.x.reshape(-1, 1)

# Compute asymptotic variance of GMM estimator
G = - (X.T @ Z) / n  # Derivative of moment condition
var_beta_gmm = np.linalg.inv(G @ W_opt @ G.T) / n
std_errors = np.sqrt(np.diag(var_beta_gmm)).reshape(-1, 1)

# Display results
results_df = pd.DataFrame({
    'Coefficient': beta_2step.flatten(),
    'Std. Error': std_errors.flatten()
}, index=['Intercept', 'log_rprice', 'log_rincome'])

print(results_df)



####################

import pandas as pd
import numpy as np
import statsmodels.api as sm
from linearmodels.iv import IVGMM

# Load data
data = sm.datasets.get_rdataset("CigarettesSW", "AER").data

# Prepare variables
data['log_packs'] = np.log(data['packs'])  # Dependent variable
data['log_rprice'] = np.log(data['price'] / data['cpi'])  # Endogenous regressor
data['log_rincome'] = np.log(data['income'] / data['population'] / data['cpi'])  # Exogenous regressor
data['salestax'] = data['tax'] / data['cpi']  # Instrument

# Define variables
y = data['log_packs']
X_endog = data[['log_rprice']]  # Endogenous regressor
X_exog = sm.add_constant(data[['log_rincome']])  # Exogenous regressor
Z = data[['salestax']]  # Instrument for log_rprice

# GMM IV estimation
gmm_model = IVGMM(dependent=y, exog=X_exog, endog=X_endog, instruments=Z)
gmm_results = gmm_model.fit()

# Show results
print(gmm_results.summary)
### Notice that the SEs are slightly different because the package assumes the model is heteroskedastic
