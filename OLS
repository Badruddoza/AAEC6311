import numpy as np
import pandas as pd
import statsmodels.api as sm
from scipy import stats

# Set random seed for reproducibility
np.random.seed(1234)

# Simulate data
n = 100
x1 = np.random.normal(0, 1, n)
x2 = np.random.normal(0, 1, n)
errors = np.random.normal(0, 1, n)
y = 5 + 2 * x1 + 3 * x2 + errors

# Create dataframe
data = pd.DataFrame({'y': y, 'x1': x1, 'x2': x2})

# Construct the design matrix manually
X = np.column_stack((np.ones(n), x1, x2))

# Estimate OLS coefficients manually: β̂ = (X'X)⁻¹X'y
beta_hat = np.linalg.inv(X.T @ X) @ X.T @ y

# Calculate residuals and variance of residuals
y_hat = X @ beta_hat
residuals = y - y_hat
sigma_squared = (residuals @ residuals) / (n - X.shape[1])

# Calculate the variance-covariance matrix of beta_hat
var_beta_hat = sigma_squared * np.linalg.inv(X.T @ X)

# Calculate standard errors, t-statistics, and p-values
se_beta_hat = np.sqrt(np.diag(var_beta_hat))
t_stats = beta_hat / se_beta_hat
p_values = [2 * (1 - stats.t.cdf(abs(t), df=n - X.shape[1])) for t in t_stats]

# Display manual OLS results
manual_results = pd.DataFrame({
    'Coefficient': beta_hat,
    'Std. Error': se_beta_hat,
    't-Statistic': t_stats,
    'p-Value': p_values
}, index=['Intercept', 'x1', 'x2'])

print("Manual OLS Estimates \n", manual_results.round(4))

# Cross-check using statsmodels
X_with_const = sm.add_constant(data[['x1', 'x2']])
model = sm.OLS(data['y'], X_with_const).fit()
package_results = pd.DataFrame({
    'Coefficient': model.params,
    'Std. Error': model.bse,
    't-Statistic': model.tvalues,
    'p-Value': model.pvalues
})

print("OLS Estimates Using Statsmodels \n", package_results.round(4))
